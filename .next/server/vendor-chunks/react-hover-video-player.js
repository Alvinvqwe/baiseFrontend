"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-hover-video-player";
exports.ids = ["vendor-chunks/react-hover-video-player"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-hover-video-player/dist/index.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/react-hover-video-player/dist/index.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ HoverVideoPlayer)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\n\n// src/HoverVideoPlayer.tsx\n\n\n// src/HoverVideoPlayer.styles.ts\nvar expandToFillContainerStyle = {\n  position: \"absolute\",\n  width: \"100%\",\n  height: \"100%\",\n  top: 0,\n  bottom: 0,\n  left: 0,\n  right: 0\n};\nvar containerMatchContentDimensionsStyle = {\n  display: \"inline-block\"\n};\nvar containerSizingStyles = {\n  video: containerMatchContentDimensionsStyle,\n  overlay: containerMatchContentDimensionsStyle,\n  container: null,\n  manual: null\n};\nvar pausedOverlayWrapperSizingStyles = {\n  // Sizing should be based on the video element, so make the overlay\n  // expand to cover the player's container element\n  video: expandToFillContainerStyle,\n  // Sizing should be based on the paused overlay, so set position: relative\n  // to make it occupy space in the document flow\n  overlay: {\n    position: \"relative\"\n  },\n  // Sizing should be based on the player's container element, so make the overlay\n  // expand to cover it\n  container: expandToFillContainerStyle,\n  // Don't apply any preset styling to the overlay\n  manual: null\n};\nvar videoSizingStyles = {\n  // Sizing should be based on the video element, so set display: block\n  // to make sure it occupies space in the document flow\n  video: {\n    display: \"block\",\n    // Ensure the video is sized relative to the container's width\n    // rather than the video asset's native width\n    width: \"100%\"\n  },\n  // Make the video element expand to cover the container if we're sizing\n  // based on the overlay or container\n  overlay: expandToFillContainerStyle,\n  container: expandToFillContainerStyle,\n  // Don't apply any preset styling to the video\n  manual: null\n};\nvar overlayTransitionDurationVar = \"--hvp-overlay-transition-duration\";\nvar visibleOverlayStyles = {\n  visibility: \"visible\",\n  opacity: 1,\n  transitionProperty: \"opacity\",\n  transitionDuration: `var(${overlayTransitionDurationVar})`\n};\nvar hiddenOverlayStyles = {\n  visibility: \"hidden\",\n  opacity: 0,\n  transitionProperty: \"opacity, visibility\",\n  transitionDuration: `var(${overlayTransitionDurationVar}), 0s`,\n  transitionDelay: `0s, var(${overlayTransitionDurationVar})`\n};\n\n// src/HoverVideoPlayer.tsx\nfunction HoverVideoPlayer(_a) {\n  var _b = _a, {\n    videoSrc,\n    videoCaptions = null,\n    focused = false,\n    disableDefaultEventHandling = false,\n    hoverTarget = null,\n    onHoverStart = null,\n    onHoverEnd = null,\n    hoverOverlay = null,\n    pausedOverlay = null,\n    loadingOverlay = null,\n    loadingStateTimeout = 200,\n    overlayTransitionDuration = 400,\n    playbackStartDelay = 0,\n    restartOnPaused = false,\n    unloadVideoOnPaused = false,\n    playbackRangeStart = null,\n    playbackRangeEnd = null,\n    muted = true,\n    volume = 1,\n    loop = true,\n    preload = void 0,\n    crossOrigin = void 0,\n    controls = false,\n    controlsList = void 0,\n    disableRemotePlayback = true,\n    disablePictureInPicture = true,\n    style = void 0,\n    hoverOverlayWrapperClassName = void 0,\n    hoverOverlayWrapperStyle = void 0,\n    pausedOverlayWrapperClassName = void 0,\n    pausedOverlayWrapperStyle = void 0,\n    loadingOverlayWrapperClassName = void 0,\n    loadingOverlayWrapperStyle = void 0,\n    videoId = void 0,\n    videoClassName = void 0,\n    videoRef: forwardedVideoRef = null,\n    videoStyle = void 0,\n    sizingMode = \"video\"\n  } = _b, spreadableProps = __objRest(_b, [\n    \"videoSrc\",\n    \"videoCaptions\",\n    \"focused\",\n    \"disableDefaultEventHandling\",\n    \"hoverTarget\",\n    \"onHoverStart\",\n    \"onHoverEnd\",\n    \"hoverOverlay\",\n    \"pausedOverlay\",\n    \"loadingOverlay\",\n    \"loadingStateTimeout\",\n    \"overlayTransitionDuration\",\n    \"playbackStartDelay\",\n    \"restartOnPaused\",\n    \"unloadVideoOnPaused\",\n    \"playbackRangeStart\",\n    \"playbackRangeEnd\",\n    \"muted\",\n    \"volume\",\n    \"loop\",\n    \"preload\",\n    \"crossOrigin\",\n    \"controls\",\n    \"controlsList\",\n    \"disableRemotePlayback\",\n    \"disablePictureInPicture\",\n    \"style\",\n    \"hoverOverlayWrapperClassName\",\n    \"hoverOverlayWrapperStyle\",\n    \"pausedOverlayWrapperClassName\",\n    \"pausedOverlayWrapperStyle\",\n    \"loadingOverlayWrapperClassName\",\n    \"loadingOverlayWrapperStyle\",\n    \"videoId\",\n    \"videoClassName\",\n    \"videoRef\",\n    \"videoStyle\",\n    \"sizingMode\"\n  ]);\n  const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  const videoRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(\n    forwardedVideoRef,\n    () => videoRef.current\n  );\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (videoRef.current)\n      videoRef.current.muted = muted;\n  }, [muted]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (videoRef.current)\n      videoRef.current.volume = volume;\n  }, [volume]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (videoRef.current)\n      videoRef.current.disableRemotePlayback = disableRemotePlayback;\n  }, [disableRemotePlayback]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (videoRef.current)\n      videoRef.current.disablePictureInPicture = disablePictureInPicture;\n  }, [disablePictureInPicture]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const videoElement = videoRef.current;\n    if (videoElement && playbackRangeStart) {\n      videoElement.currentTime = playbackRangeStart;\n    }\n  }, [playbackRangeStart]);\n  const [hoverTargetElement, setHoverTargetElement] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\n    null\n  );\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    let element = containerRef.current;\n    if (hoverTarget) {\n      if (typeof hoverTarget === \"function\") {\n        element = hoverTarget();\n      } else if (hoverTarget instanceof Node) {\n        element = hoverTarget;\n      } else if (hoverTarget && hoverTarget.hasOwnProperty(\"current\")) {\n        element = hoverTarget.current;\n      } else {\n        console.error(\n          \"HoverVideoPlayer was unable to get a usable hover target element. Please check your usage of the `hoverTarget` prop.\"\n        );\n      }\n    }\n    setHoverTargetElement(element);\n  }, [hoverTarget]);\n  const nextVideoStartTimeRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  const [isHovering, setIsHovering] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n  const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n  const [isPlaying, setIsPlaying] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n  const isHoveringRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n  isHoveringRef.current = isHovering;\n  const playTimeoutRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n  const pauseTimeoutRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n  const cancelTimeouts = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    window.clearTimeout(playTimeoutRef.current);\n    window.clearTimeout(pauseTimeoutRef.current);\n  }, []);\n  const hasPausedOverlay = Boolean(pausedOverlay);\n  const hasHoverOverlay = Boolean(hoverOverlay);\n  const shouldWaitForOverlayTransitionBeforePausing = hasPausedOverlay || hasHoverOverlay;\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const videoElement = videoRef.current;\n    if (!hoverTargetElement || !videoElement)\n      return void 0;\n    const onHoverStart2 = () => {\n      if (isHoveringRef.current)\n        return;\n      cancelTimeouts();\n      setIsHovering(true);\n    };\n    const onHoverEnd2 = () => {\n      cancelTimeouts();\n      setIsHovering(false);\n    };\n    hoverTargetElement.addEventListener(\"hvp:hoverStart\", onHoverStart2);\n    hoverTargetElement.addEventListener(\"hvp:hoverEnd\", onHoverEnd2);\n    return () => {\n      hoverTargetElement.removeEventListener(\"hvp:hoverStart\", onHoverStart2);\n      hoverTargetElement.removeEventListener(\"hvp:hoverEnd\", onHoverEnd2);\n    };\n  }, [\n    cancelTimeouts,\n    hoverTargetElement,\n    overlayTransitionDuration,\n    playbackRangeStart,\n    restartOnPaused,\n    shouldWaitForOverlayTransitionBeforePausing\n  ]);\n  const playVideo = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    const videoElement = videoRef.current;\n    if (!videoElement)\n      return;\n    videoElement.play().catch((error) => {\n      if (error.name === \"AbortError\") {\n        return;\n      }\n      if (!videoElement.muted && error.name === \"NotAllowedError\") {\n        console.warn(\n          \"HoverVideoPlayer: Playback with sound was blocked by the browser. Attempting to play again with the video muted; audio will be restored if the user clicks on the page.\"\n        );\n        videoElement.muted = true;\n        playVideo();\n        const onClickDocument = () => {\n          videoElement.muted = false;\n          document.removeEventListener(\"click\", onClickDocument);\n        };\n        document.addEventListener(\"click\", onClickDocument);\n      } else {\n        console.error(`HoverVideoPlayer: ${error.message}`);\n      }\n    });\n  }, []);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const videoElement = videoRef.current;\n    if (!videoElement)\n      return;\n    if (isHovering && !isLoading && !isPlaying) {\n      if (nextVideoStartTimeRef.current !== null && videoElement.currentTime !== nextVideoStartTimeRef.current) {\n        videoElement.currentTime = nextVideoStartTimeRef.current;\n      }\n      if (playbackStartDelay) {\n        playTimeoutRef.current = window.setTimeout(\n          playVideo,\n          playbackStartDelay\n        );\n      } else {\n        playVideo();\n      }\n    }\n  }, [isHovering, isLoading, isPlaying, playVideo, playbackStartDelay]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const videoElement = videoRef.current;\n    if (!videoElement)\n      return;\n    if (!isHovering && (isPlaying || isLoading)) {\n      const pauseVideo = () => {\n        videoElement.pause();\n        if (restartOnPaused) {\n          videoElement.currentTime = playbackRangeStart || 0;\n        }\n        nextVideoStartTimeRef.current = videoElement.currentTime;\n      };\n      if (shouldWaitForOverlayTransitionBeforePausing) {\n        pauseTimeoutRef.current = window.setTimeout(\n          pauseVideo,\n          overlayTransitionDuration\n        );\n      } else {\n        pauseVideo();\n      }\n    }\n  }, [\n    isHovering,\n    isLoading,\n    isPlaying,\n    overlayTransitionDuration,\n    playbackRangeStart,\n    restartOnPaused,\n    shouldWaitForOverlayTransitionBeforePausing\n  ]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => () => cancelTimeouts(), [cancelTimeouts]);\n  const onHoverStartCallbackRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n  onHoverStartCallbackRef.current = onHoverStart;\n  const onHoverEndCallbackRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n  onHoverEndCallbackRef.current = onHoverEnd;\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (disableDefaultEventHandling || !hoverTargetElement)\n      return void 0;\n    const onHoverStart2 = () => {\n      var _a2;\n      hoverTargetElement.dispatchEvent(new Event(\"hvp:hoverStart\"));\n      (_a2 = onHoverStartCallbackRef.current) == null ? void 0 : _a2.call(onHoverStartCallbackRef);\n    };\n    const onHoverEnd2 = () => {\n      var _a2;\n      hoverTargetElement.dispatchEvent(new Event(\"hvp:hoverEnd\"));\n      (_a2 = onHoverEndCallbackRef.current) == null ? void 0 : _a2.call(onHoverEndCallbackRef);\n    };\n    hoverTargetElement.addEventListener(\"mouseenter\", onHoverStart2);\n    hoverTargetElement.addEventListener(\"mouseleave\", onHoverEnd2);\n    hoverTargetElement.addEventListener(\"focus\", onHoverStart2);\n    hoverTargetElement.addEventListener(\"blur\", onHoverEnd2);\n    const touchStartListenerOptions = { passive: true };\n    hoverTargetElement.addEventListener(\n      \"touchstart\",\n      onHoverStart2,\n      touchStartListenerOptions\n    );\n    const onWindowTouchStart = (event) => {\n      if (!(event.target instanceof Node) || !hoverTargetElement.contains(event.target)) {\n        onHoverEnd2();\n      }\n    };\n    window.addEventListener(\n      \"touchstart\",\n      onWindowTouchStart,\n      touchStartListenerOptions\n    );\n    return () => {\n      hoverTargetElement.removeEventListener(\"mouseenter\", onHoverStart2);\n      hoverTargetElement.removeEventListener(\"mouseleave\", onHoverEnd2);\n      hoverTargetElement.removeEventListener(\"focus\", onHoverStart2);\n      hoverTargetElement.removeEventListener(\"blur\", onHoverEnd2);\n      hoverTargetElement.removeEventListener(\"touchstart\", onHoverStart2);\n      window.removeEventListener(\"touchstart\", onWindowTouchStart);\n    };\n  }, [disableDefaultEventHandling, hoverTargetElement]);\n  const previousFocusedRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (!hoverTargetElement)\n      return;\n    if (previousFocusedRef.current !== focused) {\n      previousFocusedRef.current = focused;\n      if (focused) {\n        hoverTargetElement.dispatchEvent(new Event(\"hvp:hoverStart\"));\n      } else {\n        hoverTargetElement.dispatchEvent(new Event(\"hvp:hoverEnd\"));\n      }\n    }\n  }, [hoverTargetElement, focused]);\n  const currentVideoSrc = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(videoSrc);\n  let shouldReloadVideoSrc = false;\n  if (videoSrc !== currentVideoSrc.current && !isHovering && !isPlaying) {\n    currentVideoSrc.current = videoSrc;\n    shouldReloadVideoSrc = true;\n  }\n  const hasStringSrc = typeof currentVideoSrc.current === \"string\";\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const videoElement = videoRef.current;\n    if (!videoElement)\n      return;\n    if (shouldReloadVideoSrc) {\n      videoElement.load();\n      nextVideoStartTimeRef.current = playbackRangeStart || 0;\n    }\n  }, [playbackRangeStart, shouldReloadVideoSrc]);\n  const shouldUnloadVideo = unloadVideoOnPaused && !isHovering && !isPlaying;\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    var _a2;\n    if (shouldUnloadVideo) {\n      (_a2 = videoRef.current) == null ? void 0 : _a2.load();\n    }\n  }, [shouldUnloadVideo]);\n  const shouldShowLoadingOverlay = isHovering && !isPlaying;\n  const shouldShowPausedOverlay = !isHovering || isHovering && !isPlaying;\n  const isUsingPlaybackRange = playbackRangeStart !== null || playbackRangeEnd !== null;\n  const hasLoadingOverlay = Boolean(loadingOverlay);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    \"div\",\n    __spreadValues({\n      ref: containerRef,\n      style: __spreadValues(__spreadProps(__spreadValues({\n        [overlayTransitionDurationVar]: `${overlayTransitionDuration}ms`\n      }, containerSizingStyles[sizingMode]), {\n        position: \"relative\"\n      }), style)\n    }, spreadableProps),\n    hasPausedOverlay ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      \"div\",\n      {\n        style: __spreadValues(__spreadValues(__spreadProps(__spreadValues({}, pausedOverlayWrapperSizingStyles[sizingMode]), {\n          zIndex: 1\n        }), shouldShowPausedOverlay ? visibleOverlayStyles : hiddenOverlayStyles), pausedOverlayWrapperStyle),\n        className: pausedOverlayWrapperClassName\n      },\n      pausedOverlay\n    ) : null,\n    hasLoadingOverlay ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      \"div\",\n      {\n        style: __spreadValues(__spreadValues(__spreadProps(__spreadValues({}, expandToFillContainerStyle), {\n          zIndex: 2,\n          transitionDelay: loadingStateTimeout ? `${loadingStateTimeout}ms` : void 0\n        }), shouldShowLoadingOverlay ? visibleOverlayStyles : hiddenOverlayStyles), loadingOverlayWrapperStyle),\n        className: loadingOverlayWrapperClassName\n      },\n      loadingOverlay\n    ) : null,\n    hasHoverOverlay ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      \"div\",\n      {\n        style: __spreadValues(__spreadValues(__spreadProps(__spreadValues({}, expandToFillContainerStyle), {\n          zIndex: 3\n        }), isHovering ? visibleOverlayStyles : hiddenOverlayStyles), hoverOverlayWrapperStyle),\n        className: hoverOverlayWrapperClassName\n      },\n      hoverOverlay\n    ) : null,\n    /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n      \"video\",\n      {\n        src: hasStringSrc && !shouldUnloadVideo ? currentVideoSrc.current : void 0,\n        loop: isUsingPlaybackRange ? false : loop,\n        playsInline: true,\n        preload,\n        crossOrigin,\n        ref: videoRef,\n        style: __spreadValues(__spreadProps(__spreadValues({}, videoSizingStyles[sizingMode]), {\n          objectFit: \"cover\"\n        }), videoStyle),\n        controls,\n        controlsList,\n        className: videoClassName,\n        id: videoId,\n        onPlaying: () => setIsPlaying(true),\n        onPause: () => setIsPlaying(false),\n        onEnded: () => setIsPlaying(false),\n        onLoadStart: () => setIsLoading(true),\n        onSuspend: () => setIsLoading(false),\n        onWaiting: () => setIsLoading(true),\n        onLoadedData: () => {\n          var _a2;\n          setIsLoading(\n            (((_a2 = videoRef.current) == null ? void 0 : _a2.readyState) || 0) < HTMLMediaElement.HAVE_ENOUGH_DATA\n          );\n        },\n        onAbort: () => {\n          setIsLoading(false);\n        },\n        onTimeUpdate: (\n          // If there's a playback range set, the traditional `loop` video prop won't work correctly so\n          // we'll need watch the video's time as it plays and manually keep it within the bounds of the range\n          isUsingPlaybackRange ? () => {\n            const videoElement = videoRef.current;\n            if (!videoElement)\n              return;\n            const maxVideoTime = playbackRangeEnd || videoElement.duration;\n            const minVideoTime = playbackRangeStart || 0;\n            const { currentTime } = videoElement;\n            if (loop && currentTime >= maxVideoTime) {\n              const startTime = playbackRangeStart || 0;\n              videoElement.currentTime = startTime;\n              if (isHovering && (videoElement.paused || videoElement.ended)) {\n                playVideo();\n              }\n            } else if (currentTime > maxVideoTime) {\n              videoElement.pause();\n              videoElement.currentTime = maxVideoTime;\n            } else if (currentTime < minVideoTime) {\n              videoElement.currentTime = minVideoTime;\n            }\n          } : void 0\n        )\n      },\n      shouldUnloadVideo || hasStringSrc ? null : currentVideoSrc.current,\n      videoCaptions\n    )\n  );\n}\n\n/**\n * @component HoverVideoPlayer\n * @license MIT\n *\n * @param {HoverVideoPlayerProps} props\n */\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-hover-video-player/dist/index.mjs\n");

/***/ })

};
;